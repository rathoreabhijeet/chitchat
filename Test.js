import React, { Component } from 'react';
import {  AppRegistry, StyleSheet, Navigator, View,Image,TextInput, TouchableHighlight,TouchableOpacity,
  ListView, NativeModules,DeviceEventEmitter,} from 'react-native';
import { Container,Footer,Body,Title,Card, CardItem, Item,Input, Label,Button, Text,Form ,Header,
  Content, FooterTab,Left, Right, Icon ,Div,List,ListItem,Thumbnail} from 'native-base';
import { StackNavigator,} from 'react-navigation';
import HomeScreen from './Home';
import MainScreen from './MainScreen';
import SignInScreen from './SignInScreen';
import ChatScreen from './ChatScreen';
import MessageScreen from './MessageScreen';
import ProfileScreen from './ProfileScreen';
import UserProfileScreen from './UserProfileScreen';
import firebaseApp from './Firebase';
import CallScreen from './CallScreen';


var PushNotification = require('react-native-push-notification');
PushNotification.configure({

    // (optional) Called when Token is generated (iOS and Android)
    onRegister: function(token) {
        console.log( 'TOKEN:', token );
    },

    // (required) Called when a remote or local notification is opened or received
    onNotification: function(notification) {
        console.log( 'NOTIFICATION:', notification );
    },
 
    // // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
    // senderID: "455972429931",

    // IOS ONLY (optional): default: all - Permissions to register.
    // permissions: {
    //     alert: true,
    //     badge: true,
    //     sound: true
    // },

    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
      * (optional) default: true
      * - Specified if permissions (ios) and token (android and ios) will requested or not,
      * - if not, you must call PushNotificationsHandler.requestPermissions() later
      */
    requestPermissions: true,
        
});


PushNotification.localNotification({
  /* Android Only Properties */
  id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
  ticker: "My Notification Ticker", // (optional)
  autoCancel: true, // (optional) default: true
  largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
  smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
 // bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
  subText: "You Have a new message", // (optional) default: none
  color: "red", // (optional) default: system default
  vibrate:false, // (optional) default: true
  vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
  tag: 'some_tag', // (optional) add tag to message
  group: "group", // (optional) add group to message
  ongoing: false, // (optional) set whether this is an "ongoing" notification

  // /* iOS only properties */
  // alertAction: // (optional) default: view
  // category: // (optional) default: null
  // userInfo: // (optional) default: null (object containing additional notification data)

  /* iOS and Android properties */
  title: "New Message", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
  message: "", // (required)
  playSound: false, // (optional) default: true
  soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
  number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
  repeatType: 'week', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
  actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more


  foreground: false, // BOOLEAN: If the notification was received in foreground or not
  userInteraction: false, // BOOLEAN: If the notification was opened by the user from the notification area or not
  message: 'hello', // STRING: The notification message
  data: {}, // OBJECT: The push data

});
PushNotification.cancelAllLocalNotifications();


class TestScreen extends React.Component {  
 static navigationOptions = {
   title: 'WELCOME', 
 }; 
 constructor(props) {
  super(props);
  this.state = {     
    errors: [],
  }
  this.itemsRef =firebaseApp.database().ref().child('user');
}
userlogin()
{
  const { navigate } = this.props.navigation;
  firebaseApp.auth().onAuthStateChanged(function(user) {
    if (user) {
      // User is signed in.
      navigate('Main');
    } else {
      // User is signed out.
      navigate('Home');
    }
  });
}  
 render() {
   const { navigate } = this.props.navigation;
   const date = new Date();
   return (
    <Image source={ require('./pics/back4.jpg') }  style={{height:'100%',width:'100%'}}>
    <Container>       
       <Content >
         <Text></Text>
     <Button rounded bordered style={styles.button} >
       <Icon name="home"  onPress={() =>this.userlogin()} style={styles.button} >
 <Text style={styles.button}>HOME</Text> </Icon></Button> 
 
        </Content> 
     </Container>
     </Image>
   );
 }
}
var styles = StyleSheet.create({
 button :{
   fontWeight:'bold',
   fontSize:30,
   color:'white',
alignSelf:'center',
justifyContent:'center',
borderColor:'white',
 },
});




const ChitChat = StackNavigator({
 Test:{screen : TestScreen},
 Home: { screen: HomeScreen },
 SignIn: { screen: SignInScreen },
 Chats: {screen: ChatScreen},
 Main :{screen : MainScreen},
 Message:{screen:MessageScreen},
 call:{screen:CallScreen},
 profile:{screen: ProfileScreen},
 uprofile:{screen: UserProfileScreen}
}); 
AppRegistry.registerComponent('ChitChat', () => ChitChat);